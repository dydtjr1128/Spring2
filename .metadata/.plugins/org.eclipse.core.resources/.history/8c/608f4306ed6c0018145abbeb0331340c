package kr.ac.hansung.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import kr.ac.hansung.exception.UserDuplicatedException;
import kr.ac.hansung.exception.UserNotFoundException;
import kr.ac.hansung.model.User;
import kr.ac.hansung.service.UserService;

@RestController
@RequestMapping("/api")
public class RestAPIController {

	@Autowired
	UserService userService;

	// --- Retrieve All Users;
	@RequestMapping(value = "/users", method = RequestMethod.GET)
	public ResponseEntity<List<User>> listAllUser() {
		// ResponseEntity 사용시 header, body(Lust<user>도 json으로 변경되어서(jackson이 해줌)),
		// HTTP.status 등을 한꺼번에 담아서 보낼 수있음
		List<User> users = userService.findAllUsers();
		if (users.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<List<User>>(users, HttpStatus.OK);

	}

	// --- Retrieve Single User
	@RequestMapping(value = "/users/{id}", method = RequestMethod.GET)
	public ResponseEntity<User> getUser(@PathVariable("id") long id) {
		User user = userService.findById(id);
		if (user == null) {
			// to do list : custom exception
			throw new UserNotFoundException(id);
		}
		return new ResponseEntity<User>(user, HttpStatus.OK);
	}

	// --- Create a User
	@RequestMapping(value = "/users", method = RequestMethod.POST) // request body(json)
	public ResponseEntity<Void> createUser(@RequestBody User user, UriComponentsBuilder ucBuilder) {// body에 있는 json 정보를
																									// 객체로 컨버팅

		if (userService.isUserExist(user)) {
			// to do list: exception
			throw new UserDuplicatedException(user.getName());
		}
		userService.saveUser(user);

		HttpHeaders headers = new HttpHeaders();
		headers.setLocation(ucBuilder.path("/api/users/{id}").buildAndExpand(user.getId()).toUri());// path 설정,
																									// buildAndExpand로
																									// id를 가져와 path의 id에
																									// 넣어준다.
		return new ResponseEntity<Void>(headers, HttpStatus.CREATED);// header에 사용자가 만든 url을 넘겨줄 예정

	}

	// --- Update a User
	@RequestMapping(value = "/users/{id}", method = RequestMethod.PUT)
	public ResponseEntity<User> updateUser(@PathVariable("id") long id, @RequestBody User user) {// body에 있는 json 정보를
																									// 객체로 컨버팅

		User currentUser = userService.findById(id);

		if (currentUser == null) {
			// to do list: exception
			throw new UserNotFoundException(id);
		}

		currentUser.setName(user.getName());
		currentUser.setAge(user.getAge());
		currentUser.setSalary(user.getSalary());

		userService.updateUser(currentUser);
		return new ResponseEntity<User>(currentUser, HttpStatus.OK);
	}
	
	// --- Delete a User
	@RequestMapping(value = "/users/{id}", method = RequestMethod.DELETE)
	public ResponseEntity<User> deleteUser(@PathVariable("id") long id){// body에 있는 json 정보를  객체로 컨버팅
		User currentUser = userService.findById(id);

		if (currentUser == null) {
			// to do list: exception
			throw new UserNotFoundException(id);
		}
		userService.deleteUserById(id);
		
		return new ResponseEntity<User>(HttpStatus.NO_CONTENT);
	}
	
	// --- Delete All User
	@RequestMapping(value = "/users", method = RequestMethod.DELETE)
	public ResponseEntity<User> deleteAllUser(){// body에 있는 json 정보를 객체로 컨버팅
		userService.deleteAllUsers();		
		return new ResponseEntity<User>(HttpStatus.NO_CONTENT);
	}
	
	
}
